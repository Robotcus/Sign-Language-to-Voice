import os
import pickle
import time
import cv2
import mediapipe as mp
import numpy as np
from gtts import gTTS
from playsound import playsound

# Specified directory
DATA_DIR = #Where models are

# Construct the absolute path to the model file
model_path = os.path.join(DATA_DIR, 'model.p')
# Load the model from the absolute path
model_dict = pickle.load(open(model_path, 'rb'))
model = model_dict['model']

cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)

print('Frame Grabbed')

mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles

hands = mp_hands.Hands(static_image_mode=True, min_detection_confidence=0.3)

labels_dict = {chr(65 + i): chr(65 + i) for i in range(26)}  # For A-Z
labels_dict['RESET'] = 'RESET'

start_time = None
current_letter = None
letter_hold_duration = 0.5
stored_letters = ''

while True:
    data_aux = []
    x_ = []
    y_ = []

    ret, frame = cap.read()

    if not ret:
        print("Failed to grab frame")
        break

    H, W, _ = frame.shape
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(frame_rgb)

    if results.multi_hand_landmarks:
        hand_landmarks = results.multi_hand_landmarks[0]
        mp_drawing.draw_landmarks(
            frame,
            hand_landmarks,
            mp_hands.HAND_CONNECTIONS,
            mp_drawing_styles.get_default_hand_landmarks_style(),
            mp_drawing_styles.get_default_hand_connections_style())

        for landmark in hand_landmarks.landmark:
            x_.append(landmark.x)
            y_.append(landmark.y)

        min_x = min(x_)
        min_y = min(y_)

        for landmark in hand_landmarks.landmark:
            data_aux.append(landmark.x - min_x)
            data_aux.append(landmark.y - min_y)

        x1 = int(min_x * W) - 10
        y1 = int(min_y * H) - 10
        x2 = int(max(x_) * W) + 10
        y2 = int(max(y_) * H) + 10

        if len(data_aux) == 42:
            prediction = model.predict([np.asarray(data_aux)])
            predicted_character = labels_dict[prediction[0]]

            if predicted_character == current_letter:
                if start_time is None:
                    start_time = time.time()
                elif time.time() - start_time >= letter_hold_duration:
                    if current_letter != 'RESET':
                        stored_letters += current_letter
                        print(f"Letter {current_letter} held for more than a second.")
                    else:
                        print(f"Stored String: {stored_letters}")
                        if stored_letters:
                            tts = gTTS(stored_letters, lang='en')
                            tts.save("output.mp3")
                            playsound("output.mp3")
                            os.remove("output.mp3")
                        stored_letters = ''
                    start_time = None
            else:
                current_letter = predicted_character
                start_time = None  # Reset the start time when a new letter is detected

            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 0), 4)
            cv2.putText(frame, predicted_character, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 1.3, (0, 0, 0), 3,
                        cv2.LINE_AA)

    cv2.imshow('frame', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
